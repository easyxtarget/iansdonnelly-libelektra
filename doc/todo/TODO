This is a list of TODO items which do not fit in
the other TODO categories which should be resolved in 0.8.


== GENERATORS ==

C++ code generated as frontend 
	policy based (not available, conversion failed)
	make it really simple to type and structure safe access configuration
	allow notification+locking

generator for:
	exc classes
	try catch blocks
	as keyset
	human readable text


== OpenICC ==


resolver:
	pick most cruical features, e.g. xdg

rebase:
	python+C impl compare



== unsorted ==

jenkins:
	build packages for dfc
	code coverage


doxygen 0.8.* upgrade on server->wheezy upgrade

chroot
	-c option which allows you to chroot before doing
	-u options which allows you to switch user (by setting env internally)
	kdbOpen/kdbGet/kdbSet

script testing:
	make scripts safe by chroot (only modify files below /tmp)
	should be executed by make test
	should be able to run tests for all plugins +
	different combination of plugins
	should support partly installations and/or builds (not all plugins)

	line number (maybe not important)
	should be available at target (be installed) why?
	modularity (testing where the code is) (maybe not important)
		-> plugin specifica might be tested at other level/only C
		-> how to do without need of capabilities again? backends at serialization level?? (like with mount)

use error value as exit (does it start with 0?)
printError usw. Nicht von makro abhÃ¤ngig machen?


kdb-shell:
	use import/export
	automatic tests for functionality
	Examples in --help

kdb tool:
	request -f for rm, mv in system/elektra
	converting of config files (automated tests)
	test mount/unmount

kdb resolve feature:
	output file how it would resolve for key

error specification plugin:
	parse error specification content into keyset

tcl:
	parse output?
	struct output!

documentation of the c++ binding
	with copydoc
	include files
	mark functions which are API/ABI stable (kdb.h)

git-buildpackage
	should work before release

api:
	add examples
	add tutorial

chroot:
	add -c --chroot option for all plugins

kdb tool:
	allow verification of local key database by exported file
	tset (typesafe set)


== CONTRACTS ==

add following configuration for storage plugins:
	use_absolute
	use_namespaces
	use_owner

if given use information inside file rather then parent key
if storage plugin cannot represent this information, make it as information only
give (hardcoded) defaults in contract
Warn on ignored settings -> But better to always check contract!! 
let those values be changed on mount/import/export


make plugins (backends) recursive

Plugins should state which metadata they can handle and which they can interpret or generate



== BINDINGS ==

c++:
	Keyset operator==

bindings: using swig
	python
	scheme
	java




== NOTIFICATION ==

get list of involved configuration files and do inotify on it


== ALGORITHM ==


aka distributor+filebackend plugin
(currently directly in core)
change to proper 2phase algorithm?

kdbGet
* do not get empty files
* only run on those parts where needed (not only shortcut on nothing changed)
* create an error if no kdbGet was done (no plugin added)

kdbSet
* do not run on empty configuration
* but remove config file instead
* create an error if no kdbSet was done (no plugin added)




== FURTHER HIERARCHIES ==

see also FUTURE/hierarchy for incompatible change

spec:
	has metadata only for all other hierarchies
	including explanation, description
	(but not comments which are specific for individual keys)
	allows one to retrieve config with globs and placeholders
	metadata in unapplied form
	other hierarchies get the metadata copied by struct checker


local/cwd/current: for .git/.htaccess features
	(e.g. configuration in the current working directory)
	(similar to user/ is current user)
	but maybe just using metadata and existing user/ hierarchy is
		the better option
		(would require n keysets to capture n directories)

memory (memory fallback)
local/opt: will be used if installed to /usr/local or /opt?
override/ (in memory override)
env for environment options overrides
cmd for commandline options overrides



== DATA STRUCTURES ==

Only implement what is really needed.
(can take some time to do it well!)
See also OPTIMISE

ksForEach (ks, func, handle)
	void func (Key*, void* handle);

relations

ksLookup: value keys only
	with relations
	only in the same folder (sibling)
	only below the current folder (below)

merge + split configuration
http://en.wikipedia.org/wiki/Set_(mathematics)

allow to change behaviour of keyset using callbacks:
	collect statistics which keys were used and modified how often
	allow tracing of individual (non-removed) keys


KeySet* ksUnion
ksIntersection
ksMerge

http://en.wikipedia.org/wiki/Complement_(set_theory)
ksComplement (Difference, SymmetricDifference)


ksCopy -> ksAssign
ksPopCurrent

InsertIterator
	ksAppend() in O(1)
	KDB_O_NOALL could use binary search

AccessIterator
	not integrated
	ksCurrent only for iterator
	feature for error handling needed?
	functors and same level iterators build on top of it

KeySet as hash?


Transform to propertY tree
import or inherit from config
commandline parser?


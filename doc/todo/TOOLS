== TOOLS ==

kdb tools meta description files

== MOUNT ==

mountget, mountset, mountls

rename getmeta to metaget, metaset, metals?

Allow to pass mounting config with kdb-tools and libtools

add possibility to give names and configure plugins:

e.g.
#recode will be used both for renaming of value+name
kdb mount path=s.ini,recode=utf8..latin1,name=backendname /path/to/mount
          ni,name=pluginname rename,rebase=/path iconv

#mount openicc DB
kdb mount --resolver openicc
          OpenICC_device_config_DB.json /org/freedesktop/openicc
          yajl rename,rebase=/org/freedesktop/openicc,recase=lower


allow to mount/umount plugin to all currently mounted backends +
register them to be added for all future backends

allow --no-env --no-arg --no-default arguments?

== libelektra-tools ==

including mounting functionality






= KDB =

allow key array increments with kdb tool

list existing plugins
	which are available? (src/plugins)
	which are installed
	kdb pls
	(workaround: use ls /usr/lib/elektra)

kdb-shell:
	use import/export
	automatic tests for functionality
	Examples in --help

kdb tool:
	request -f for rm, mv in system/elektra

kdb resolve feature:
	output file how it would resolve for key

kdb tool:
	allow verification of local key database by exported file
	tset (typesafe set)

env-get env-set `kdb env-get`

kdb-file/resolver (give file given key name)

kdb-edit edit file in any of Elektra's format
	export to temporary file, open with editor and reimport

export should be able to export only configuration that was changed
	(suppress default config)

install config (mount+preload system config) by using meta struct

== GEN ==

code generator always yields LONG_MIN, LONG_MAX on any type!

cmake support for "kdb gen" (run kdb gen within cmake)

use doc/METADATA.ini to validate config files
	fix check/type vs. type and check/type/{min,max} vs. range problem

cleanup: use utilities to avoid code duplication
	see Makefile + util.tmpl

environment parsing support
static compilation model

has_ queries
(allows one to differ between default fallback and intentional set default)

new generators:
	all hardcoded (without elektra dependency)?

type: set of enums (see libmount for options)

read from

limit range for bool/enum

override/fallback type inference

docu
validation of schema + line info


make a commit model for configuration with a rollback when commit failed
(set only on temporary object, until commit was done)
separate commit to kdbSet


== GEN-BACKEND ==

Code generator that does what "kdb mount" does but provides a statically
compiled variant thereof.
Needed for bootstrapping.


== DBUS ==

Daemon which exports whole elektra configuration
(dbus bridge, first of so called bridges, other ideas: ldap, snmp)


= other stuff =

uninstall:
	let user find configuration of uninstalled software
upgrade

web2.0:
	share elektra xml files
	web frontent to kdb with xml/generate output/paste


== docu ==

git-<command> like functionality
ascii doc
man pages
